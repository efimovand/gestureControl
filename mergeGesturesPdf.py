from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QVBoxLayout, QWidget, QGraphicsView, QGraphicsScene, QFileDialog, QScrollBar
from PyQt5.QtGui import QPixmap, QCursor, QPainter
from PyQt5.QtCore import Qt, QObject, pyqtSignal, QThread
import fitz
import time
import cv2
import mediapipe as mp
from collections import deque


last_gesture = time.perf_counter()  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∂–µ—Å—Ç–∞


class GestureRecognitionThread(QThread):

    motion_detected = pyqtSignal(str)  # –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∂–µ—Å—Ç

    def run(self):

        cap = cv2.VideoCapture(0)  # –ö–∞–º–µ—Ä–∞
        hands = mp.solutions.hands.Hands(max_num_hands=1)  # –û–±—ä–µ–∫—Ç –ò–ò –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∞–¥–æ–Ω–∏

        prev_finger8_positions = deque(maxlen=10)
        motion_threshold = 200

        while True:

            _, image = cap.read()
            image = cv2.flip(image, 1)
            imageRGB = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            results = hands.process(imageRGB)

            if results.multi_hand_landmarks:

                for handLms in results.multi_hand_landmarks:

                    for point_id, point_coordinates in enumerate(handLms.landmark):

                        h, w, c = image.shape
                        cx, cy = int(point_coordinates.x * w), int(point_coordinates.y * h)

                        # –£–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–ª–µ—Ü
                        if point_id == 8:

                            prev_finger8_positions.append((cx, cy))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–∞–ª—å—Ü–∞

                            if len(prev_finger8_positions) == prev_finger8_positions.maxlen:  # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–∞–ª—å—Ü–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞

                                prev_finger8_pos = prev_finger8_positions[0]  # –ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
                                current_finger8_pos = prev_finger8_positions[-1]  # –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è

                                x_diff = current_finger8_pos[0] - prev_finger8_pos[0]  # –†–∞–∑–Ω–∏—Ü–∞ –ø–æ X
                                y_diff = current_finger8_pos[1] - prev_finger8_pos[1]  # –†–∞–∑–Ω–∏—Ü–∞ –ø–æ Y

                                if x_diff > motion_threshold:
                                    self.motion_detected.emit('right')
                                elif x_diff < -motion_threshold:
                                    self.motion_detected.emit('left')
                                if y_diff > motion_threshold:
                                    self.motion_detected.emit('down')
                                elif y_diff < -motion_threshold:
                                    self.motion_detected.emit('up')

                        # –ë–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü
                        if point_id == 4:

                            current_finger4_pos = cx, cy  # –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è

                            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–µ—Å—Ç–∞ —â–∏–ø–∫–∞
                            try:
                                if abs(current_finger4_pos[0] - current_finger8_pos[0]) < 15 and abs(current_finger4_pos[1] - current_finger8_pos[1]) < 15 and (time.perf_counter() - last_gesture > 1):
                                    self.motion_detected.emit('shipok')
                            except:
                                pass


class PDFViewerApp(QMainWindow):

    def __init__(self):

        super().__init__()
        self.setWindowTitle("PDF Drawing App")
        self.setGeometry(100, 100, 800, 600)

        self.central_widget = QWidget()
        self.layout = QVBoxLayout()

        self.open_pdf_button = QPushButton("Open PDF")
        self.open_pdf_button.clicked.connect(self.open_pdf)
        self.layout.addWidget(self.open_pdf_button)

        self.next_page_button = QPushButton("Next Page")
        self.next_page_button.clicked.connect(self.next_page)
        self.layout.addWidget(self.next_page_button)

        self.prev_page_button = QPushButton("Prev Page")
        self.prev_page_button.clicked.connect(self.previous_page)
        self.layout.addWidget(self.prev_page_button)

        self.change_cursor_button = QPushButton("Switch Cursor")
        self.change_cursor_button.clicked.connect(self.change_cursor)
        self.layout.addWidget(self.change_cursor_button)

        self.scene = QGraphicsView()
        self.layout.addWidget(self.scene)

        self.central_widget.setLayout(self.layout)
        self.setCentralWidget(self.central_widget)

        self.pdf_path = None
        self.pdf_doc = None
        self.pdf_pages = []
        self.current_page = 0
        self.visible_cursor = False
        self.change_cursor()

    # –û—Ç–∫—Ä—ã—Ç–∏–µ PDF
    def open_pdf(self):
        self.pdf_path, _ = QFileDialog.getOpenFileName(self, "Open PDF File", "", "PDF Files (*.pdf)")
        if self.pdf_path:
            self.load_pdf()

    # –ó–∞–≥—Ä—É–∑–∫–∞ PDF
    def load_pdf(self):
        self.pdf_doc = fitz.open(self.pdf_path)
        for page_num in range(self.pdf_doc.page_count):
            pixmap = QPixmap()
            pixmap.loadFromData(self.pdf_doc[page_num].get_pixmap().tobytes())
            self.pdf_pages.append(pixmap)
        self.show_page(0)

    # –ü–æ–∫–∞–∑—ã–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    def show_page(self, page_num):
        self.current_page = page_num
        pixmap = self.pdf_pages[page_num]
        scene = QGraphicsScene()
        scene.addPixmap(pixmap)
        self.scene.setScene(scene)

    # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    def next_page(self):
        if self.current_page < len(self.pdf_pages) - 1:
            self.current_page += 1
            self.show_page(self.current_page)
            print(f'\rüìñ Page [{self.current_page + 1}/{len(self.pdf_pages)}]', end='', flush=True)

    # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    def previous_page(self):
        if self.current_page > 0:
            self.current_page -= 1
            self.show_page(self.current_page)
            print(f'\rüìñ Page [{self.current_page + 1}/{len(self.pdf_pages)}]', end='', flush=True)

    # –°–º–µ–Ω–∞ –∫—É—Ä—Å–æ—Ä–∞ (—Ü–≤–µ—Ç–Ω–æ–π/–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π)
    def change_cursor(self):
        if not self.visible_cursor:
            current_color = Qt.red
            self.visible_cursor = True
            print('\rüî¥ The cursor has been turned ON', end='', flush=True)
        else:
            current_color = Qt.transparent
            self.visible_cursor = False
            print('\rüö´ The cursor has been turned OFF', end='', flush=True)

        red_cursor_pixmap = QPixmap(16, 16)
        red_cursor_pixmap.fill(Qt.transparent)

        painter = QPainter(red_cursor_pixmap)
        painter.setPen(Qt.NoPen)
        painter.setBrush(current_color)
        painter.drawEllipse(0, 0, 16, 16)
        painter.end()

        red_cursor = QCursor(red_cursor_pixmap)
        self.setCursor(red_cursor)

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤
    def handle_gesture(self, direction):

        global last_gesture

        if time.perf_counter() - last_gesture > 0.5:  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∂–µ—Å—Ç–∞–º–∏

            if direction == 'right':  # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                self.next_page()

            elif direction == 'left':  # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                self.previous_page()

            elif direction == 'shipok':  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
                self.change_cursor()

            last_gesture = time.perf_counter()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∂–µ—Å—Ç–∞


if __name__ == "__main__":
    import sys

    app = QApplication(sys.argv)
    viewer_window = PDFViewerApp()
    viewer_window.show()

    gesture_thread = GestureRecognitionThread()
    gesture_thread.motion_detected.connect(viewer_window.handle_gesture)
    gesture_thread.start()

    sys.exit(app.exec_())